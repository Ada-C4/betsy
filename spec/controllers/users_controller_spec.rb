require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do
  describe "GET 'index'" do
    it "is successful" do
      get :index
      expect(response.status).to eq 200
    end
  end

  describe "GET 'new'" do
    it "render new view" do
      get :new
      expect(subject).to render_template :new
    end
  end

  describe "GET 'edit'" do
    let(:user) do
      User.create(name: "Nemo", username: "Nemo1", email: "nemo@gmail.com", password: "123", password_confirmation: "123")
    end

    it "renders edit view" do
      get :edit, id: user.id
      expect(subject).to render_template :edit
    end

  end

  describe "GET 'show'" do
    let(:user) do
        User.create(name: "Nemo", username: "Nemo1", email: "nemo@gmail.com", password: "123", password_confirmation: "123")
    end

    it "renders the show view" do
      get :show, id: user.id
      expect(subject).to render_template :show
    end
  end

  describe "POST 'create'" do
    let(:good_params) do
       {
        user: {
          name: "Nemo",
          username: "Nemo1",
          email: "nemo@gmail.com",
          password: "123",
          password_confirmation: "123"
        }
      }
    end

    let(:bad_params) do
      {
       user: {
         name: "",
         username: "Nemo1",
         email: "nemo@gmail.com",
         password: "1223",
         password_confirmation: "123"
       }
      }
    end

    it "redirect to index page" do
      post :create, good_params
      #success case
      expect(subject).to redirect_to users_path
    end

    it "render new template on error" do
      #Error case
      post :create, bad_params
      expect(subject).to render_template :new
    end
  end


  describe "PATCH 'update'" do
      let(:user) do
        User.create(name: "Nemo", username: "Nemo1", email: "nemo@gmail.com", password: "123", password_confirmation: "123")
      end

      let(:good_params) do
         {
           id: user.id,
          user: {
            name: "Nemo",
            username: "Nemo1",
            email: "nemo@gmail.com",
            password: "123",
            password_confirmation: "123"
          }
        }
      end

      let(:bad_params) do
        {
          id: user.id,
         user: {
           name: "",
           username: "Nemo1",
           email: "nemo@gmail.com",
           password: "1223",
           password_confirmation: "123"
         }
        }
      end

    it "redirect to index page" do
      patch :update,  good_params
      expect(subject).to redirect_to users_path
    end

    it "render edit template on error" do
      patch :update, bad_params
      expect(subject).to render_template "edit"
    end

    end

end
