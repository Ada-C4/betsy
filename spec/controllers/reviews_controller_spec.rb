require 'rails_helper'
require 'pry'
#
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
RSpec.describe ReviewsController, type: :controller do
#
#   # This should return the minimal set of attributes required to create a valid
#   # Review. As you add validations to Review, be sure to
#   # adjust the attributes here as well.
  let(:valid_attributes) {
    { rating: 4,
      description: "Great!"}
  }

  let(:invalid_attributes) {
    { description: "The worst"}
  }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # ReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET 'index'" do
    it "is successful" do
      get :index
      expect(response.status).to eq 200
    end
  end

  describe "GET 'new'" do
    it "renders the new page" do
      get :new
      expect(subject).to render_template :new
    end
  end

  describe "GET 'edit'" do
    it "renders edit page" do
      new_review = Review.create(valid_attributes)
      get :edit, id: new_review.id
      expect(subject).to render_template :edit
    end
  end

  # describe "GET 'show'" do
  #   it "renders show page" do
  #     new_medium = Review.create(title: "Hello, World!", creator: "Jennie")
  #     get :show, id: new_medium.id
  #     expect(subject).to render_template :show, id: new_medium.id
  #   end
  # end
  #
  # describe "POST 'create'" do
  #   it "redirects to show on success" do
  #     post :create, good_params
  #     new_medium = Review.last
  #     expect(subject).to redirect_to polymorphic_path(new_medium) # need to fix this path
  #   end
  #   it "renders new on fail" do
  #     post :create, bad_params
  #     expect(subject).to render_template :new
  #   end
  # end
  #
  # describe "PATCH 'update'" do
  #   let (:new_medium) do
  #     Review.create(title: "Hello, World!", creator: "Jennie")
  #   end
  #   it "redirects to album on success" do
  #     patch :update, update_params
  #     expect(subject).to redirect_to polymorphic_path(new_medium) # need to fix this path
  #   end
  #   it "renders edit template on fail" do
  #     patch :update, bad_update_params
  #     expect(subject).to render_template (:edit)
  #   end
  # end
  #
  # describe "DELETE 'destroy'" do
  #   it "redirects to index on delete" do
  #     new_medium = Review.create(title: "Hello, World!", creator: "Jennie")
  #     delete :destroy, id: new_medium.id
  #     expect(subject).to redirect_to polymorphic_path(Review.name.downcase.pluralize) # need to fix this path
  #   end
  # end
  #
  # describe "POST 'upvote'" do
  #   it "redirects to show page" do
  #     new_medium = Review.create(title: "Hello, World!", creator: "Jennie")
  #     post :upvote, id: new_medium.id
  #     expect(subject).to redirect_to polymorphic_path(new_medium) # need to fix this path
  #   end
  # end

  # describe "GET #index" do
  #   it "assigns all reviews as @reviews" do
  #     review = Review.create! valid_attributes
  #     get :index
  #     binding.pry
  #     expect(assigns(:reviews)).to eq([review])
  #   end
  # end
#
#   describe "GET #show" do
#     it "assigns the requested review as @review" do
#       review = Review.create! valid_attributes
#       get :show, {:id => review.to_param}, valid_session
#       expect(assigns(:review)).to eq(review)
#     end
#   end
#
#   describe "GET #new" do
#     it "assigns a new review as @review" do
#       get :new, {}, valid_session
#       expect(assigns(:review)).to be_a_new(Review)
#     end
#   end
#
#   describe "GET #edit" do
#     it "assigns the requested review as @review" do
#       review = Review.create! valid_attributes
#       get :edit, {:id => review.to_param}, valid_session
#       expect(assigns(:review)).to eq(review)
#     end
#   end
#
#   describe "POST #create" do
#     context "with valid params" do
#       it "creates a new Review" do
#         expect {
#           post :create, {:review => valid_attributes}, valid_session
#         }.to change(Review, :count).by(1)
#       end
#
#       it "assigns a newly created review as @review" do
#         post :create, {:review => valid_attributes}, valid_session
#         expect(assigns(:review)).to be_a(Review)
#         expect(assigns(:review)).to be_persisted
#       end
#
#       it "redirects to the created review" do
#         post :create, {:review => valid_attributes}, valid_session
#         expect(response).to redirect_to(Review.last)
#       end
#     end
#
#     context "with invalid params" do
#       it "assigns a newly created but unsaved review as @review" do
#         post :create, {:review => invalid_attributes}, valid_session
#         expect(assigns(:review)).to be_a_new(Review)
#       end
#
#       it "re-renders the 'new' template" do
#         post :create, {:review => invalid_attributes}, valid_session
#         expect(response).to render_template("new")
#       end
#     end
#   end
#
#   describe "PUT #update" do
#     context "with valid params" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }
#
#       it "updates the requested review" do
#         review = Review.create! valid_attributes
#         put :update, {:id => review.to_param, :review => new_attributes}, valid_session
#         review.reload
#         skip("Add assertions for updated state")
#       end
#
#       it "assigns the requested review as @review" do
#         review = Review.create! valid_attributes
#         put :update, {:id => review.to_param, :review => valid_attributes}, valid_session
#         expect(assigns(:review)).to eq(review)
#       end
#
#       it "redirects to the review" do
#         review = Review.create! valid_attributes
#         put :update, {:id => review.to_param, :review => valid_attributes}, valid_session
#         expect(response).to redirect_to(review)
#       end
#     end
#
#     context "with invalid params" do
#       it "assigns the review as @review" do
#         review = Review.create! valid_attributes
#         put :update, {:id => review.to_param, :review => invalid_attributes}, valid_session
#         expect(assigns(:review)).to eq(review)
#       end
#
#       it "re-renders the 'edit' template" do
#         review = Review.create! valid_attributes
#         put :update, {:id => review.to_param, :review => invalid_attributes}, valid_session
#         expect(response).to render_template("edit")
#       end
#     end
#   end
#
#   describe "DELETE #destroy" do
#     it "destroys the requested review" do
#       review = Review.create! valid_attributes
#       expect {
#         delete :destroy, {:id => review.to_param}, valid_session
#       }.to change(Review, :count).by(-1)
#     end
#
#     it "redirects to the reviews list" do
#       review = Review.create! valid_attributes
#       delete :destroy, {:id => review.to_param}, valid_session
#       expect(response).to redirect_to(reviews_url)
#     end
#   end
#
end
